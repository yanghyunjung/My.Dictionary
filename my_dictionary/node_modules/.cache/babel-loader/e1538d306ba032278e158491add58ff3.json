{"ast":null,"code":"import { firestore } from \"../../firebase\";\nconst dict_db = firestore.collection(\"dict\"); //Actions\n\nconst LOAD = 'dict/LOAD';\nconst CREATE = 'dict/CREATE';\nconst initialState = {\n  list: [{\n    id: 1,\n    text: 'ㅎ1ㅎ1',\n    explain: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\",\n    example: '저 친구가 초콜릿을 줬어. ㅎ1ㅎ1.'\n  }]\n};\nexport const loadDict = dict => {\n  return {\n    type: LOAD,\n    dict\n  };\n};\nexport const createDict = dict => {\n  return {\n    type: CREATE,\n    dict\n  };\n};\nexport const loadDictFB = () => {\n  return function (dispatch) {\n    dict_db.get().then(docs => {\n      let dict_data = [];\n      docs.forEach(doc => {\n        if (doc.exists) {\n          dict_data = [...dict_data, {\n            id: doc.id,\n            ...doc.data()\n          }];\n        }\n      });\n      console.log(dict_data);\n      dispatch(loadDict(dict_data));\n    });\n  };\n}; //Reducer\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case 'dict/LOAD':\n      {\n        if (action.dict.length > 0) {\n          return {\n            list: action.bucket\n          };\n        }\n\n        return state;\n      }\n\n    case 'dict/CREATE':\n      {\n        const new_dict_list = [...state.list, action.dict];\n        console.log(new_dict_list);\n        return { ...state,\n          list: new_dict_list\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/hyunjung/Project_01/my_dictionary/my_dictionary/src/redux/modules/dict.js"],"names":["firestore","dict_db","collection","LOAD","CREATE","initialState","list","id","text","explain","example","loadDict","dict","type","createDict","loadDictFB","dispatch","get","then","docs","dict_data","forEach","doc","exists","data","console","log","reducer","state","action","length","bucket","new_dict_list"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,gBAAxB;AAEA,MAAMC,OAAO,GAAGD,SAAS,CAACE,UAAV,CAAqB,MAArB,CAAhB,C,CAEA;;AACA,MAAMC,IAAI,GAAG,WAAb;AACA,MAAMC,MAAM,GAAG,aAAf;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE,CAAC;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,MAAf;AAAuBC,IAAAA,OAAO,EAAE,4BAAhC;AAA8DC,IAAAA,OAAO,EAAE;AAAvE,GAAD;AADc,CAArB;AAIA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AACjC,SAAO;AAAEC,IAAAA,IAAI,EAAEV,IAAR;AAAcS,IAAAA;AAAd,GAAP;AACA,CAFM;AAIP,OAAO,MAAME,UAAU,GAAIF,IAAD,IAAU;AACnC,SAAO;AAAEC,IAAAA,IAAI,EAAET,MAAR;AAAgBQ,IAAAA;AAAhB,GAAP;AACA,CAFM;AAIP,OAAO,MAAMG,UAAU,GAAG,MAAM;AAC/B,SAAO,UAAUC,QAAV,EAAmB;AAEzBf,IAAAA,OAAO,CAACgB,GAAR,GAAcC,IAAd,CAAoBC,IAAD,IAAU;AAC5B,UAAIC,SAAS,GAAG,EAAhB;AAEAD,MAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACrB,YAAGA,GAAG,CAACC,MAAP,EAAc;AACdH,UAAAA,SAAS,GAAG,CAAC,GAAGA,SAAJ,EAAe;AAACb,YAAAA,EAAE,EAAEe,GAAG,CAACf,EAAT;AAAa,eAAGe,GAAG,CAACE,IAAJ;AAAhB,WAAf,CAAZ;AACC;AACD,OAJD;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACAJ,MAAAA,QAAQ,CAACL,QAAQ,CAACS,SAAD,CAAT,CAAR;AACA,KAXD;AAYA,GAdD;AAeA,CAhBM,C,CAkBP;;AACA,eAAe,SAASO,OAAT,CAAiBC,KAAK,GAAGvB,YAAzB,EAAuCwB,MAAM,GAAG,EAAhD,EAAoD;AAClE,UAAQA,MAAM,CAAChB,IAAf;AACC,SAAK,WAAL;AAAkB;AACjB,YAAGgB,MAAM,CAACjB,IAAP,CAAYkB,MAAZ,GAAqB,CAAxB,EAA0B;AACzB,iBAAO;AAACxB,YAAAA,IAAI,EAAEuB,MAAM,CAACE;AAAd,WAAP;AACA;;AAEA,eAAOH,KAAP;AACD;;AAED,SAAK,aAAL;AAAoB;AACnB,cAAMI,aAAa,GAAG,CAAC,GAAGJ,KAAK,CAACtB,IAAV,EAAgBuB,MAAM,CAACjB,IAAvB,CAAtB;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYM,aAAZ;AACA,eAAO,EACN,GAAGJ,KADG;AAENtB,UAAAA,IAAI,EAAE0B;AAFA,SAAP;AAIA;;AACD;AACC,aAAOJ,KAAP;AAlBF;AAoBA","sourcesContent":["import {firestore} from \"../../firebase\";\n\nconst dict_db = firestore.collection(\"dict\");\n\n//Actions\nconst LOAD = 'dict/LOAD';\nconst CREATE = 'dict/CREATE';\n\nconst initialState = {\n\tlist: [{ id: 1, text: 'ㅎ1ㅎ1', explain: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\", example: '저 친구가 초콜릿을 줬어. ㅎ1ㅎ1.'}],\n};\n\nexport const loadDict = (dict) => {\n\treturn { type: LOAD, dict };\n};\n\nexport const createDict = (dict) => {\n\treturn { type: CREATE, dict };\n};\n\nexport const loadDictFB = () => {\n\treturn function (dispatch){\n\n\t\tdict_db.get().then((docs) => {\n\t\t\tlet dict_data = [];\n\t\t\t\n\t\t\tdocs.forEach((doc) => {\n\t\t\t\tif(doc.exists){\n\t\t\t\tdict_data = [...dict_data, {id: doc.id, ...doc.data()}];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconsole.log(dict_data);\n\t\t\tdispatch(loadDict(dict_data));\n\t\t});\n\t};\n};\n\n//Reducer\nexport default function reducer(state = initialState, action = {}) {\n\tswitch (action.type) {\n\t\tcase 'dict/LOAD': {\n\t\t\tif(action.dict.length > 0){\n\t\t\t\treturn {list: action.bucket};\n\t\t\t}\n\t\t\t\n\t\t\t\treturn state;\n\t\t}\n\n\t\tcase 'dict/CREATE': {\n\t\t\tconst new_dict_list = [...state.list, action.dict];\n\t\t\tconsole.log(new_dict_list);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlist: new_dict_list,\n\t\t\t};\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}"]},"metadata":{},"sourceType":"module"}