{"ast":null,"code":"var _jsxFileName = \"/Users/hyunjung/Project_01/my_dictionary/my_dictionary/src/DictPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addDictFB, createDict } from './redux/modules/dict'; //connect.. mapTo... (클래스형에서만 씀.)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DictPage = () => {\n  _s();\n\n  const [word, setWord] = useState({});\n  const dispatch = useDispatch();\n\n  const onChangeHandler = event => {\n    // 객체 비구조화 문법 👇\n    const {\n      target: {\n        name,\n        value\n      }\n    } = event;\n    setWord({ ...word,\n      [name]: value\n    });\n  }; // 1. input value 3가지를 ref 로 가져와서 각각 변수에 저장하기\n  // 2. 위에서 정의한 변수를 딕셔너리 형태로 애드딕트에프비 안에 넣기\n  // 디스패치 하는 함수 👇\n\n\n  const onDispatchWord = () => {\n    dispatch(addDictFB(word));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DictPage\",\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"\\uB2E8\\uC5B4 \\uCD94\\uAC00\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        children: [\"\\uB2E8\\uC5B4\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"text\",\n          type: \"text\",\n          style: {\n            marginTop: '5px'\n          },\n          onChange: onChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        children: [\"\\uC124\\uBA85\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"explain\",\n          type: \"text\",\n          style: {\n            marginTop: '5px'\n          },\n          onChange: onChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        children: [\"\\uC608\\uC2DC\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"example\",\n          type: \"text\",\n          style: {\n            marginTop: '5px'\n          },\n          onChange: onChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: btnStyle,\n        onClick: onDispatchWord,\n        children: \"\\uB204\\uB974\\uACE0 + \\uBC84\\uD2BC \\uD074\\uB9AD!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n\n_s(DictPage, \"kgj21FUssywiY0c8KZIp5i3gNmI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DictPage;\nexport default DictPage; //추가하기 버튼을 꾸며봅시당\n\nconst btnStyle = {\n  color: 'white',\n  background: '#4b3d37',\n  fontSize: '1.0rem',\n  fontWeight: 'bold',\n  borderRadius: '.35rem',\n  width: '250px',\n  height: '35px',\n  border: 'none'\n};\nconst Input = styled.div`\n\tmax-width: 350px;\n\tmin-height: 5vh;\n\tbackground-color: #f4f1f0;\n\tpadding: 16px;\n\tmargin: 20px auto;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\ttext-decoration: underline;\n\tfont-size: 12px;\n`;\n_c2 = Input;\nconst Container = styled.div`\n\tmax-width: 350px;\n\tmin-height: 60vh;\n\tbackground-color: #fff;\n\tpadding: 16px;\n\tmargin: 20px auto;\n\tborder-radius: 5px;\n\tborder: none;\n`;\n_c3 = Container;\nconst Title = styled.h1`\n\tcolor: black;\n\ttext-align: center;\n\tfont-size: 20px;\n`; //export default withRouter(DictPage);\n\n_c4 = Title;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"DictPage\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Container\");\n$RefreshReg$(_c4, \"Title\");","map":{"version":3,"sources":["/Users/hyunjung/Project_01/my_dictionary/my_dictionary/src/DictPage.js"],"names":["React","useRef","useState","styled","useDispatch","addDictFB","createDict","DictPage","word","setWord","dispatch","onChangeHandler","event","target","name","value","onDispatchWord","marginTop","btnStyle","color","background","fontSize","fontWeight","borderRadius","width","height","border","Input","div","Container","Title","h1"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addDictFB, createDict } from './redux/modules/dict';\n\n//connect.. mapTo... (클래스형에서만 씀.)\n\nconst DictPage = () => {\n\tconst [word, setWord] = useState({});\n\tconst dispatch = useDispatch();\n\n\tconst onChangeHandler = (event) => {\n\t\t// 객체 비구조화 문법 👇\n\t\tconst {\n\t\t\ttarget: { name, value },\n\t\t} = event;\n\t\tsetWord({ ...word, [name]: value });\n\t};\n\n// 1. input value 3가지를 ref 로 가져와서 각각 변수에 저장하기\n// 2. 위에서 정의한 변수를 딕셔너리 형태로 애드딕트에프비 안에 넣기\n\t// 디스패치 하는 함수 👇\n\tconst onDispatchWord = () => {\n\t\tdispatch(addDictFB(word));\n\t};\n\n\treturn (\n\t\t<div className='DictPage'>\n\t\t\t<Title>단어 추가하기</Title>\n\t\t\t<Container>\n\t\t\t\t<Input>\n\t\t\t\t\t단어\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='text'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tstyle={{ marginTop: '5px' }}\n\t\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</Input>\n\t\t\t\t<Input>\n\t\t\t\t\t설명\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='explain'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tstyle={{ marginTop: '5px' }}\n\t\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</Input>\n\t\t\t\t<Input>\n\t\t\t\t\t예시\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='example'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tstyle={{ marginTop: '5px' }}\n\t\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</Input>\n\n\t\t\t\t<button style={btnStyle} onClick={onDispatchWord}>\n\t\t\t\t\t누르고 + 버튼 클릭!\n\t\t\t\t</button> \n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default DictPage;\n\n//추가하기 버튼을 꾸며봅시당\nconst btnStyle = {\n\tcolor: 'white',\n\tbackground: '#4b3d37',\n\tfontSize: '1.0rem',\n\tfontWeight: 'bold',\n\tborderRadius: '.35rem',\n\twidth: '250px',\n\theight: '35px',\n\tborder: 'none',\n};\n\nconst Input = styled.div`\n\tmax-width: 350px;\n\tmin-height: 5vh;\n\tbackground-color: #f4f1f0;\n\tpadding: 16px;\n\tmargin: 20px auto;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\ttext-decoration: underline;\n\tfont-size: 12px;\n`;\n\nconst Container = styled.div`\n\tmax-width: 350px;\n\tmin-height: 60vh;\n\tbackground-color: #fff;\n\tpadding: 16px;\n\tmargin: 20px auto;\n\tborder-radius: 5px;\n\tborder: none;\n`;\n\nconst Title = styled.h1`\n\tcolor: black;\n\ttext-align: center;\n\tfont-size: 20px;\n`;\n\n//export default withRouter(DictPage);"]},"metadata":{},"sourceType":"module"}