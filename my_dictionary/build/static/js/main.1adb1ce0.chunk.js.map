{"version":3,"sources":["firebase.js","redux/modules/dict.js","DictPage.js","DictList.js","App.js","reportWebVitals.js","redux/configStore.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","dict_db","firestore","collection","initialState","list","id","text","explain","example","is_loaded","DictPage","useState","word","setWord","dispatch","useDispatch","onChangeHandler","event","target","name","value","className","Title","Container","Input","type","style","marginTop","onChange","btnStyle","onClick","dict","dict_item","add","then","docRef","createDict","color","background","fontSize","fontWeight","borderRadius","width","height","border","styled","div","h1","ListStyle","ItemStyle","DictList","setList","dict_list","useSelector","state","map","item","textDecoration","UpBtn","button","Plusbtn","App","React","useEffect","get","docs","dict_data","forEach","doc","exists","data","window","scrollTo","top","left","behavior","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","createBrowserHistory","thunk","enhancer","applyMiddleware","rootReducer","combineReducers","action","length","new_dict_list","console","log","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1adb1ce0.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    // config\n        apiKey: \"AIzaSyBzLx9Jo-ZcMjSKFKQcpqyLQtHTEurZDAQ\",\n        authDomain: \"my-dictionary-4dd7a.firebaseapp.com\",\n        projectId: \"my-dictionary-4dd7a\",\n        storageBucket: \"my-dictionary-4dd7a.appspot.com\",\n        messagingSenderId: \"967607769164\",\n        appId: \"1:967607769164:web:5934d87f576e5ce551bce9\",\n        measurementId: \"G-4HJ6802Z35\"\n      };\n\nfirebase.initializeApp(firebaseConfig);\n\nconst firestore = firebase.firestore();\n\nexport {firestore};","import {firestore} from \"../../firebase\";\n\nconst dict_db = firestore.collection(\"dict\");\n\n//Actions\nconst LOAD = 'dict/LOAD';\nconst CREATE = 'dict/CREATE';\n\nconst initialState = {\n\tlist: [{ id: 1, text: 'ㅎ1ㅎ1', explain: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\", example: '저 친구가 초콜릿을 줬어. ㅎ1ㅎ1.'}],\n\tis_loaded: false,\n};\n\n// Action Creators\nexport const loadDict = (dict) => {\n\treturn { type: LOAD, dict };\n};\n\nexport const createDict = (dict) => {\n\treturn { type: CREATE, dict };\n};\n\nexport const loadDictFB = () => {\n\treturn function (dispatch){\n\t\tdict_db.get().then((docs) => {\n\t\t\tlet dict_data = [];\n\t\t\t\n\t\t\tdocs.forEach((doc) => {\n\t\t\t\tif(doc.exists){\n\t\t\t\tdict_data = [...dict_data, {id: doc.id, ...doc.data()}];\n\t\t\t\t}\n\t\t\t});\n\t\t\tdispatch(loadDict(dict_data));\n\t\t});\n\t};\n};\n\nexport const addDictFB = (dict) => {\n\treturn function (dispatch){\n\t\tlet dict_item = {text: dict.text, example: dict.example, explain: dict.explain };\n\n\t\tdict_db.add(dict_item).then(docRef => {\n\t\t\tdict_item = {...dict_item, id: docRef.id};\n\t\t\tdispatch(createDict(dict_item));\n\t\t})\n\t}\n}\n\n// export const updateDictFB = (dict) => {\n// \treturn function(dispatch, getState){\n// \t\tconst _dict_data = getState().dict.list[dict];\n\t\t\n// \t\tlet dict_data = {..._dict_data};\n\n// \t\tdict_db.doc(dict_data.id).update(dict_data).then(docRef => {\n// \t\t\tdispatch(updateDictFB(dict));\n// \t\t});\n// \t}\n// }\n\n//Reducer\nexport default function reducer(state = initialState, action = {}) {\n\tswitch (action.type) {\n\t\tcase 'dict/LOAD': {\n\t\t\tif(action.dict.length > 0){\n\t\t\t\t// [{ id: 1, text: 'ㅎ1ㅎ1', explain: \"히히를 변형한 단어. 숫자 1을 'ㅣ'로 쓴다.\", example: '저 친구가 초콜릿을 줬어. ㅎ1ㅎ1.'}]\n\t\t\t\t// {id: '1232', text: {text: 123, example:123, explain: 123}}\n\t\t\t\treturn {...state, list: action.dict};\n\t\t\t}\n\n\t\t\t\treturn state;\n\t\t}\n\n\t\tcase 'dict/CREATE': {\n\t\t\tconst new_dict_list = [...state.list, action.dict,];\n\t\t\tconsole.log(new_dict_list);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlist: new_dict_list,\n\t\t\t};\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addDictFB, createDict } from './redux/modules/dict';\n\n//connect.. mapTo... (클래스형에서만 씀.)\n\nconst DictPage = () => {\n\tconst [word, setWord] = useState({});\n\tconst dispatch = useDispatch();\n\n\tconst onChangeHandler = (event) => {\n\t\t// 객체 비구조화 문법 👇\n\t\tconst {\n\t\t\ttarget: { name, value },\n\t\t} = event;\n\t\tsetWord({ ...word, [name]: value });\n\t};\n\n// 1. input value 3가지를 ref 로 가져와서 각각 변수에 저장하기\n// 2. 위에서 정의한 변수를 딕셔너리 형태로 애드딕트에프비 안에 넣기\n\t// 디스패치 하는 함수 👇\n\tconst onDispatchWord = () => {\n\t\tdispatch(addDictFB(word));\n\t};\n\n\treturn (\n\t\t<div className='DictPage'>\n\t\t\t<Title>단어 추가하기</Title>\n\t\t\t<Container>\n\t\t\t\t<Input>\n\t\t\t\t\t단어\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='text'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tstyle={{ marginTop: '5px' }}\n\t\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</Input>\n\t\t\t\t<Input>\n\t\t\t\t\t설명\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='explain'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tstyle={{ marginTop: '5px' }}\n\t\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</Input>\n\t\t\t\t<Input>\n\t\t\t\t\t예시\n\t\t\t\t\t<input\n\t\t\t\t\t\tname='example'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tstyle={{ marginTop: '5px' }}\n\t\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\t/>\n\t\t\t\t</Input>\n\n\t\t\t\t<button style={btnStyle} onClick={onDispatchWord}>\n\t\t\t\t\t누르고 + 버튼 클릭!\n\t\t\t\t</button> \n\t\t\t</Container>\n\t\t</div>\n\t);\n};\n\nexport default DictPage;\n\n//추가하기 버튼을 꾸며봅시당\nconst btnStyle = {\n\tcolor: 'white',\n\tbackground: '#4b3d37',\n\tfontSize: '1.0rem',\n\tfontWeight: 'bold',\n\tborderRadius: '.35rem',\n\twidth: '250px',\n\theight: '35px',\n\tborder: 'none',\n};\n\nconst Input = styled.div`\n\tmax-width: 350px;\n\tmin-height: 5vh;\n\tbackground-color: #f4f1f0;\n\tpadding: 16px;\n\tmargin: 20px auto;\n\tborder-radius: 5px;\n\tdisplay: flex;\n\tflex-direction: column;\n\ttext-decoration: underline;\n\tfont-size: 12px;\n`;\n\nconst Container = styled.div`\n\tmax-width: 350px;\n\tmin-height: 60vh;\n\tbackground-color: #fff;\n\tpadding: 16px;\n\tmargin: 20px auto;\n\tborder-radius: 5px;\n\tborder: 1px solid #ddd;\n`;\n\nconst Title = styled.h1`\n\tcolor: black;\n\ttext-align: center;\n\tfont-size: 20px;\n`;\n\n//export default withRouter(DictPage);","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\n// props\nconst DictList = ({ setList }) => {\n\tconst dict_list = useSelector((state) => state.dict.list);\n\t// console.log(dict_list);\n\n\treturn (\n\t\t<ListStyle>\n\t\t\t<Title>MY DICTIONARY</Title>\n\t\t\t{dict_list.map((item) => (\n\t\t\t\t<ItemStyle key={item.id}>\n\t\t\t\t\t<p style={{ fontSize: '10px', textDecoration: 'underline' }}>단어</p>\n\t\t\t\t\t<div>{item.text}</div>\n\t\t\t\t\t<p style={{ fontSize: '10px', textDecoration: 'underline' }}>설명</p>\n\t\t\t\t\t<div>{item.explain}</div>\n\t\t\t\t\t<p style={{ fontSize: '10px', textDecoration: 'underline' }}>예시</p>\n\t\t\t\t\t<div style={{ color: '#2c7744', fontWeight: 'bold' }}>\n\t\t\t\t\t\t{item.example}\n\t\t\t\t\t</div>\n\t\t\t\t</ItemStyle>\n\t\t\t))}\n\t\t</ListStyle>\n\t);\n};\n\nconst Title = styled.h1`\n\tcolor: black;\n\ttext-align: center;\n\tfont-size: 20px;\n`;\n\n\nconst ListStyle = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\toverflow-x: hidden;\n\toverflow-y: auto;\n`;\n\nconst ItemStyle = styled.div`\n\tpadding: 16px;\n\tmargin: 8px;\n\tbackground-color: white;\n\theight: auto;\n`;\n\nexport default DictList;","import React, { useState } from 'react';\n\nimport styled from 'styled-components';\nimport DictPage from './DictPage';\nimport DictList from './DictList';\nimport { loadDictFB, addBucketFB } from './redux/modules/dict';\nimport { useDispatch } from 'react-redux';\n\nimport { firestore } from './firebase';\n\n// 함수형 리덕스는 =\n// useSelect(리덕스에 있는 상태값 가져오기), useDispatch(리덕스 스토어에 상태 넣기)\n\nconst App = () => { \n\tconst [list, setList] = useState(true);\n\tconst dispatch = useDispatch();\n\n  React.useEffect(()=> { //useEffect는 componentDidMount랑 update 두 기능을 같이 한다!!\n    dispatch(loadDictFB());\n  },[])\n\n\tconst addBtn = () => {\n\t\tsetList(!list);\n\t};\n\treturn (\n\t\t<Container>\n\t\t\t{list ? <DictList setList={setList} /> : <DictPage />}\n\t\t\t<Plusbtn onClick={addBtn}>+</Plusbtn>\n\t\t\t<UpBtn onClick={()=>{\n\t\t\t\twindow.scrollTo({top:0, left:0, behavior:\"smooth\"});\n\t\t\t}}>▲</UpBtn>\n\t\t</Container>\n\t);\n};\n\nconst UpBtn = styled.button`\n\tcolor: white;\n\tbackground-color: #4b3d37;\n\tborder-radius: 100px;\n\tmargin-left: none;\n\tfont-size: 25px;\n\tfont-weight: 700;\n\tborder: none;\n\twidth: 40px;\n\theight: 40px;\n`;\n\nconst Plusbtn = styled.button`\n\tcolor: white;\n\tbackground-color: #4b3d37;\n\tborder-radius: 100px;\n\tmargin-left: 215px;\n\tfont-size: 50px;\n\tfont-weight: 650;\n\tborder: none;\n\twidth: 60px;\n\theight: 60px;\n`;\nconst Container = styled.div`\n\tmax-width: 280px;\n\tmin-height: 80vh;\n\tbackground-color: #967a6e;\n\tpadding: 16px;\n\tmargin: 20px auto;\n\tborder-radius: 5px;\n\tborder: 1px solid #ddd;\n`;\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport dict from \"./modules/dict\";\nimport { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n\nconst middlewares = [thunk];\n\nconst enhancer = applyMiddleware(...middlewares); \nconst rootReducer = combineReducers({ dict });\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/configStore\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}